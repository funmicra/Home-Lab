---
- name: Gather System Information
  hosts: Syndicate
  become: true
  gather_facts: true
  vars:
    system_info_log: "/var/log/ansible-system-info.log"

  tasks:
    # --------------------------
    # CPU Information
    # --------------------------
    - name: Get CPU Information
      shell: |
        MODEL=$(grep "model name" /proc/cpuinfo | head -n1 | awk -F: '{print $2}' | xargs)
        CORES=$(grep "cpu cores" /proc/cpuinfo | head -n1 | awk -F: '{print $2}' | xargs)
        THREADS=$(grep "siblings" /proc/cpuinfo | head -n1 | awk -F: '{print $2}' | xargs)
        USAGE=$(top -bn1 | awk '/Cpu\(s\)/ {print $2}')
        echo "$MODEL|$CORES|$THREADS|$USAGE"
      register: cpu_info
      changed_when: false

    - name: Parse CPU Information
      set_fact:
        cpu:
          model: "{{ cpu_info.stdout.split('|')[0] }}"
          cores: "{{ cpu_info.stdout.split('|')[1] }}"
          threads: "{{ cpu_info.stdout.split('|')[2] }}"
          usage: "{{ cpu_info.stdout.split('|')[3] }}%"

    # --------------------------
    # Memory Information
    # --------------------------
    - name: Get Memory Information
      shell: |
        MEM_USED=$(free -h | awk 'NR==2 {print $3}')
        MEM_TOTAL=$(free -h | awk 'NR==2 {print $2}')
        MEM_PERCENT=$(free | awk 'NR==2 {printf "%.2f", $3/$2*100}')
        SWAP_USED=$(free -h | awk 'NR==3 {print $3}')
        SWAP_TOTAL=$(free -h | awk 'NR==3 {print $2}')
        echo "$MEM_USED|$MEM_TOTAL|$MEM_PERCENT|$SWAP_USED|$SWAP_TOTAL"
      register: memory_info
      changed_when: false

    - name: Parse Memory Information
      set_fact:
        memory:
          used: "{{ memory_info.stdout.split('|')[0] }}"
          total: "{{ memory_info.stdout.split('|')[1] }}"
          percent: "{{ memory_info.stdout.split('|')[2] }}%"
          swap_used: "{{ memory_info.stdout.split('|')[3] }}"
          swap_total: "{{ memory_info.stdout.split('|')[4] }}"

    # --------------------------
    # Disk Information
    # --------------------------
    - name: Get Disk Information
      shell: df -h --output=source,size,used,avail,pcent,target | awk 'NR>1 {printf "%s %s/%s (%s) - %s\n",$1,$3,$2,$5,$6}'
      register: disk_info
      changed_when: false

    - name: Convert disk info to list
      set_fact:
        disk: "{{ disk_info.stdout_lines }}"

    # --------------------------
    # Network Information
    # --------------------------
    - name: Get Network Information
      shell: |
        ip -4 addr show | awk '/inet / && !/127.0.0.1/ {print $NF ": " $2}' | sort
      register: network_info
      changed_when: false

    - name: Convert network info to list
      set_fact:
        network: "{{ network_info.stdout_lines }}"

    # --------------------------
    # Process Information
    # --------------------------
    - name: Get Process Information
      shell: |
        TOTAL=$(ps -eo pid | wc -l)
        RUNNING=$(ps -eo stat= | grep -c "R")
        SLEEPING=$(ps -eo stat= | grep -c "S")
        STOPPED=$(ps -eo stat= | grep -c "T")
        ZOMBIE=$(ps -eo stat= | grep -c "Z")
        echo "$TOTAL|$RUNNING|$SLEEPING|$STOPPED|$ZOMBIE"
      register: process_info
      changed_when: false

    - name: Parse Process Information
      set_fact:
        processes:
          total: "{{ process_info.stdout.split('|')[0] }}"
          running: "{{ process_info.stdout.split('|')[1] }}"
          sleeping: "{{ process_info.stdout.split('|')[2] }}"
          stopped: "{{ process_info.stdout.split('|')[3] }}"
          zombie: "{{ process_info.stdout.split('|')[4] }}"

    # --------------------------
    # Service Information
    # --------------------------
    - name: Get Service Information
      shell: |
        for service in sshd nginx apache2 mysql; do
          if systemctl is-active --quiet $service 2>/dev/null; then
            echo "$service: Active"
          else
            echo "$service: Inactive/Not Found"
          fi
        done
      register: service_info
      changed_when: false

    - name: Convert service info to dictionary
      set_fact:
        services: >-
          {{
            dict(
              service_info.stdout_lines | map('split', ': ') | map('list') 
            )
          }}

    # --------------------------
    # Aggregate Information
    # --------------------------
    - name: Aggregate System Facts
      set_fact:
        system_facts:
          hostname: "{{ ansible_hostname }}"
          os: "{{ ansible_distribution }} {{ ansible_distribution_version }}"
          kernel: "{{ ansible_kernel }}"
          architecture: "{{ ansible_architecture }}"
          cpu: "{{ cpu }}"
          memory: "{{ memory }}"
          disk: "{{ disk }}"
          network: "{{ network }}"
          processes: "{{ processes }}"
          services: "{{ services }}"
          timestamp: "{{ ansible_date_time.iso8601 }}"

    # --------------------------
    # Display Information
    # --------------------------
    - name: Display System Information in a readable list
      debug:
        msg:
          - "=== System Information Report ==="
          - "Host: {{ system_facts.hostname }}"
          - "OS: {{ system_facts.os }}"
          - "Kernel: {{ system_facts.kernel }} ({{ system_facts.architecture }})"
          - "CPU Info:"
          - "{{ system_facts.cpu }}"
          - "Memory Info:"
          - "{{ system_facts.memory }}"
          - "Disk Info:"
          - "{{ system_facts.disk }}"
          - "Network Info:"
          - "{{ system_facts.network }}"
          - "Process Info:"
          - "{{ system_facts.processes }}"
          - "Service Info:"
          - "{{ system_facts.services }}"
          - "Report Timestamp: {{ system_facts.timestamp }}"

    # --------------------------
    # Save to Log File
    # --------------------------
    - name: Save Information to Log
      lineinfile:
        path: "{{ system_info_log }}"
        line: "{{ system_facts.timestamp }} - {{ system_facts.hostname }}: CPU={{ system_facts.cpu.usage }}, Memory={{ system_facts.memory.percent }}, Processes={{ system_facts.processes.total }}"
        create: yes
      delegate_to: localhost

